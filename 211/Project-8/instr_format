from bitfield import BitField
from enum import Enum, Flag

# The field bit positions
reserved = BitField(31,31)
op_field = BitField(26, 30)
cond_field = BitField(22, 25)
reg_target_field = BitField(18, 21)
reg_src1_field = BitField(14, 17)
reg_src2_field = BitField(10, 13)
offset_field = BitField(0, 9)

class OpCode(Enum):
    """The operation codes specify what the CPU and ALU should do."""
    HALT = 0    # Stop the computer simulation (in Duck Machine project)
    LOADD = 1    # Transfer from memory to register
    STORE = 2   # Transfer from register to memory
    ADD = 3     # Addition
    SUB = 5     # Subtraction
    MUL = 6     # Multiplication
    DIV = 7     #Integer division (like // in python)

class CondFlag(Flag):
    """The condition mask in an instruction and the format
    of the condition code register are the same, so we can
    logically and them to predicate an instruction.
    """
    M = 1  # Minus (negative)
    Z = 2  # Zero
    P = 4  # Positive
    V = 8  # Overflow (arithmetic error, e.g., divide by zero)
    NEVER = 0
    ALWAYS = M | Z | P | V

    def __str__(self):
        """If the exact combination has a name, we return that.
        Otherwise, we combine bits, e.g., ZP for non-negative.
        """
        for i in CondFlag:
            if i is self:
                return i.name
    
        bits = []
        for i in CondFlag:
            masked = self & i
            if masked and masked is i:
                bits.append(i.name)
        return "".join(bits)

NAMED_REGS = {
    "r0": 0, "zero": 0,
    "r1": 1, "r2": 2, "r3": 3, "r4": 4, "r5": 5, "r6": 6, "r7": 7, "r8": 8,
    "r9": 9, "r10": 10, "r11": 11, "r12": 12, "r13": 13, "r14": 14,
    "r15": 15, "pc": 15
}

class Instruction(object):
    """An instruction is made up of several fields, which
    are represented here as object fields.
    """

    def __init__(self, op: OpCode, cond: CondFlag,
                 reg_target: int, reg_src1: int,
                 reg_src2: int, offset: int):
        """Assemble an instruction from its fields."""
        self.op = op
        self.cond = cond
        self.reg_target = reg_target
        self.reg_src1 = reg_src1
        self.reg_src2 = reg_src2
        self.offset = offset

    def encode(self) -> int:
        """Encode instruction as 32-bit integer"""
        word = 0
        word = op_field.insert(self.op.value, word)
        word = cond_field.insert(self.cond.value, word)
        word = reg_target_field.insert(self.reg_target, word)
        word = reg_src1_field.insert(self.reg_src1, word)
        word = reg_src2_field.insert(self.reg_src2, word)
        word = self.insert_signed(offset_field, self.offset, word)
        return word

    def insert_signed(self, field: BitField, value: int, word: int) -> int:
        """Helper function to insert a signed value into a BitField"""
        
        if value < 0:
            value = (1 << field.width) + value
        return field.insert(value, word)

    def __str__(self):
        """String representation looks something like assembly code"""
        if self.cond is CondFlag.ALWAYS:
            pred = ""
        else:
            pred = f"/{self.cond}"

        return (f"{self.op.name}{pred}   "
                + f"r{self.reg_target},r{self.reg_src1},r{self.reg_src2}[{self.offset}]")

def decode(word: int) -> Instruction:
    """Decode a memory word (32 bit int) into a new Instruction"""
    op = OpCode(op_field.extract(word))
    cond = CondFlag(cond_field.extract(word))
    reg_target = reg_target_field.extract(word)
    reg_src1 = reg_src1_field.extract(word)
    reg_src2 = reg_src2_field.extract(word)
    offset = offset_field.extract_signed(word)
    return Instruction(op, cond, reg_target, reg_src1, reg_src2, offset)
